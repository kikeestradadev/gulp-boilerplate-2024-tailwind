{"version":3,"sources":["styles.scss","hacks/_utilities.scss","styles.css","core/_media-queries.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["@import \"./core/media-queries\";\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n$breakpoints: (\n\ts: 0,\n\tsm: 480,\n\tm: 640px,\n\tl: 960px,\n\tlg: 1280px,\n\txl: 1600px,\n\txxl: 1800px\n);\n\n@layer base {\n\t@import \"layout/layout\";\n\t@import \"layout/fonts\";\t\n\t@import \"hacks/hacks\";\n}\n\n@layer components {\n\t@import \"core-modules/core-modules\";\n\t@import \"internal-modules/internal-modules\";\n}\n@layer utilities {\n\t@import \"hacks/utilities\";\n}\n",".main-container{\n\twidth: 100%;\n\tmax-width: 3500px;\n\tmargin: 0 auto;\n\tpadding: 0 15px;\n\t@include from(1630px){\n\t\tpadding: 0 0;\n\t}\n}\n","@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --header-height: 3rem;\n    --header-bg: #007BDF;\n    --body-bg: #ffffff;\n    --footer-bg: #007BDF;\n  }\n  @media screen and (min-width: 960px) {\n    :root {\n      --header-height: 4rem;\n    }\n  }\n\n  ::selection {\n    color: white;\n    background: #00CBFF;\n  }\n\n  strong {\n    font-weight: 700;\n  }\n\n  body {\n    min-height: calc(100vh);\n    background: var(--body-bg);\n    display: flex;\n    flex-direction: column;\n  }\n\n  :root {\n    --header-color: #1F2024;\n    --paragraph-color:#1F2024;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    color: var(--header-color);\n    margin-bottom: 30px;\n  }\n\n  html, body {\n    font-family: \"Montserrat\", sans-serif;\n  }\n\n  h1 {\n    font-style: normal;\n    font-variant: normal;\n    font-weight: 600;\n    font-size: 36px;\n    line-height: 43px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.72px;\n  }\n  @media screen and (min-width: 960px) {\n    h1 {\n      font-size: 51px;\n      line-height: 56px;\n      letter-spacing: -0.66px;\n    }\n  }\n\n  h2 {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 29px;\n    line-height: 35px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.58px;\n  }\n  @media screen and (min-width: 960px) {\n    h2 {\n      font-size: 41px;\n      line-height: 49px;\n      letter-spacing: -0.82px;\n    }\n  }\n\n  h3 {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 24px;\n    line-height: 29px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.48px;\n  }\n  @media screen and (min-width: 960px) {\n    h3 {\n      font-size: 27px;\n      line-height: 32px;\n      letter-spacing: -0.54px;\n    }\n  }\n\n  h4 {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 28px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.4px;\n  }\n  @media screen and (min-width: 960px) {\n    h4 {\n      font-size: 23px;\n      line-height: 28px;\n      letter-spacing: -0.46px;\n    }\n  }\n\n  h5 {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 17px;\n    line-height: 27px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.34px;\n  }\n  @media screen and (min-width: 960px) {\n    h5 {\n      font-size: 19px;\n      line-height: 23px;\n      letter-spacing: -0.38px;\n    }\n  }\n\n  h6 {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 25px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: -0.28px;\n  }\n  @media screen and (min-width: 960px) {\n    h6 {\n      font-size: 15px;\n      line-height: 27px;\n      letter-spacing: -0.3px;\n    }\n  }\n\n  p {\n    margin-bottom: 20px;\n  }\n\n  p, span, a, ul li, ol li {\n    font-style: normal;\n    font-variant: normal;\n    font-weight: normal;\n    font-size: 15px;\n    line-height: 27px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: 0px;\n    --paragraph-color: #1F2024;\n  }\n  @media screen and (min-width: 960px) {\n    p, span, a, ul li, ol li {\n      font-size: 16px;\n      line-height: 22px;\n      letter-spacing: 0px;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  menu, ol, ul {\n    list-style: disc;\n    /* Restaura los estilos de lista predeterminados para `ol`, `disc` es usual para `ul` */\n    margin: 1em 0;\n    /* Valores comunes por defecto de margen para listas */\n    padding: 0 0 0 40px;\n    /* Valores comunes por defecto de relleno para listas, proporcionando espacio para marcadores de lista */\n  }\n}\n@layer components {\n  .core-module-style {\n    color: green;\n  }\n\n  .internal-module-style {\n    color: red;\n  }\n}\n@layer utilities {\n  .main-container {\n    width: 100%;\n    max-width: 3500px;\n    margin: 0 auto;\n    padding: 0 15px;\n  }\n  @media screen and (min-width: 1630px) {\n    .main-container {\n      padding: 0 0;\n    }\n  }\n}","@use \"sass:map\";\n@use \"sass:meta\";\n@use \"sass:math\";\n\n/// Devuelve true si el breakpoint es parte del core\n/// @group mq\n/// @author  Alvaro Felipe\n/// @param   {number} $bp - breakpoint\n/// @example scss\n///    .elemento {\n///      @if isCoreBreakpoint(l) {\n///        $customBp : 720px;\n///        ....\n///      }\n///    }\n@function isCoreBreakpoint($bp){\n  @if map.get($breakpoints,$bp) {\n    @return true\n  } @else {\n    @return false\n  }\n}\n\n/// Devuelve true si el breakpint es v√°lido (em, rem, px)\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $bp - breakpoint a verificar.\n@function isValidBreakpoint($bp){\n  @if meta.type-of($bp) == number and (math.unit($bp) == 'px' or math.unit($bp) == 'em' or math.unit($bp) == 'rem') {\n    @return true\n  } @else {\n    @return false\n  }\n}\n\n/// Obtiene un breakpoint del core\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $bp - breakpoint a obtener.\n@function getBp($bp){\n  @return map.get($breakpoints,$bp)\n}\n\n/// Convierte un valor en em o rem a px\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $value - var a convertir a pixeles.\n@function toPx($value){\n  @if meta.type-of($value) == number {\n    @if math.unit($value) == 'em'{\n      @return ($value / 1em) * 16px;\n    } @else if math.unit($value) == 'rem'{\n      @return ($value / 1rem) * 16px\n    } @else if math.unit($value) == 'px' {\n      @return $value;\n    } @else {\n      @error \"La funcion toPx() solo acepta numeros en em o rem o px\"\n    }\n  } @else {\n    @error \"La funcion toPx() solo acepta numeros en em o rem\"\n  }\n}\n\n/// From (mayor que $bp)\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $from - breakpoint\n/// @example scss\n///     .elemento {\n///       width: 30%;\n///       @include from(m) {\n///         width: 50%;\n///       }\n///     }\n@mixin from($from){\n  // Si el bp es del core de EDgrid\n  @if isCoreBreakpoint($from){\n    // no imprime media query para tama√±o s\n    @if $from == s {\n      @content\n    }\n    // imprime media query en los otros tama√±os\n    @else {\n      @media screen and (min-width: getBp($from)){ @content }\n    }\n  }\n  // Si el bp no es del core de EDgrid pero es una unidad v√°lida\n  @else if isValidBreakpoint($from){\n    @media screen and (min-width: $from){ @content }\n  }\n  // Error\n  @else {\n    @error 'El mixin from() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un n√∫mero en px, em o rem'\n  }\n}\n\n/// To (es menor que $to)\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $to - breakpoint\n/// @example scss\n///     .elemento {\n///       width: 50%;\n///       @include to(m) {\n///         width: 30%;\n///       }\n///     }\n@mixin to($to){\n  // Si es un breakpoint del core\n  @if isCoreBreakpoint($to){\n    @if $to == s {\n      @content;\n    } @else {\n      @media screen and (max-width : getBp($to) - 1px) { @content }\n    }\n  }\n  // Si es un breakpoint v√°lido (px, em, rem)\n  @else if isValidBreakpoint($to){\n    @media screen and (max-width: toPx($to) - 1px){ @content }\n  }\n  // Si no es un breakpoint v√°lido lanzar error\n  @else {\n    @error 'El mixin to() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un n√∫mero en px, em o rem'\n  }\n}\n\n/// fromTo la regla se ejecuta entre ambos breakpoints.\n/// @group   mq\n/// @author  Alvaro Felipe\n/// @param   {number} $from - breakpoint desde que medida se iniciara la regla.\n/// @param   {number} $to - breakpoint hasta que medida se ejecutara la regla.\n/// @example scss\n///     .elemento {\n///       background-color: cyan;\n///       @include fromTo(s, l) {\n///         background-color: darken(cyan, .8);\n///       }\n///     }\n@mixin fromTo($from,$to){\n  // Si ambos son breakpoints del core\n  @if isCoreBreakpoint($from) and isCoreBreakpoint($to){\n    @if getBp($to) > getBp($from) {\n      @media screen and (min-width : getBp($from)) and (max-width : getBp($to) - 1px) {\n        @content\n      }\n    } @else {\n      @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\n    }\n  }\n\n  // Si solo $from es breakpoint del core\n  @else if isCoreBreakpoint($from) and not isCoreBreakpoint($to){\n    @if isValidBreakpoint($to) {\n      @if toPx($to) > toPx(getBp($from)) {\n        @media screen and (min-width : getBp($from)) and (max-width : toPx($to) - 1px) {\n          @content\n        }\n      } @else {\n        @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\n      }\n    } @else {\n      @error \"El segundo argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un n√∫mero en px, em o rem\"\n    }\n  }\n\n  // Si solo $to es breakpoint del core\n  @else if not isCoreBreakpoint($from) and isCoreBreakpoint($to) {\n    @if isValidBreakpoint($from) {\n      @if toPx(getBp($to)) > toPx($from){\n        @media screen and (min-width : $from) and (max-width : getBp($to) - 1px) {\n          @content\n        }\n      } @else {\n        @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\n      }\n    }\n    @else {\n      @error \"El primer argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un n√∫mero en px, em o rem\"\n    }\n  }\n\n  // Si no son breakpoints del core pero son breakpoints v√°lidos (px, em, rem)\n  @else if isValidBreakpoint($from) and isValidBreakpoint($to){\n    @if toPx($to) > toPx($from) {\n      @media screen and (min-width : $from) and (max-width : toPx($to) - 1px) {\n        @content\n      }\n    } @else {\n      @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\n    }\n  }\n\n  // Si al menos hay un breakpoint inv√°lido\n  @else {\n    @error 'Los argumentos del mixin fromTo() deben ser breakpoints del Core (#{map-keys($breakpoints)}) o n√∫meros en px, em o rem';\n  }\n}\n"]}